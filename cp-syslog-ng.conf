####################################################################################
#
#     SyslogNG file to transform DFW logs into CSV that CheckPoint can understand
#     Michael Endrizzi
#
####################################################################################
##################### SOURCE IP where to get data from #################
source s_cp_net { udp( ip("<LOCAL IP ADDRESS>") port (514)); };



########## FILTER out some DFW logs that are not relevent ###########
# Filter out the DFW TERM log entries, not relevant

# only dfw logs
filter f_cp_dfwlogs { program("dfwpktlogs"); };
# only tcp/udp/icmp logs
filter f_cp_match_DFW { (   (message("DROP") or message("PASS")) and message("match")   ); };

#
#
####### Parser Rules ##################
#
# use pattern database to look at a log entry and fill in a MACRO name
#  <pattern>INET match @STRING:action:@ @ESTRING:domain: @@STRING:direction:@ @NUMBER:size:@ @STRING:protocol:@ @NUMBER:size:@
# Like above line, the 'action' 'domain' 'direction' are all macros that match a pattern on the DFW log entry
#
parser p_dfw_parser {
            db-parser(file ("/etc/syslog-ng/conf.d/dwf-pattern.db")
             );
};



#
#
####### Rewrite Rules ##################
# Change into CP format. Substitute DFW PROTO for ICMP which is CP protocol
#
#
rewrite r_cp_rewrite{
                subst("PROTO","ICMP", value("protocol"));
        };

########### Log Destination processing ####################
#
#
#   Used for writing RAW DFW LOGS for testing
#
destination hosts_cp_raw_dfwlogs {
             file    ("<FILEPATH>/raw_dfw_logs.log"
                      owner(root) group(root) perm(0644) dir_perm(0700) create_dirs(yes)
                      #template ("${MSG} \n")
             );
};
#
#  Send CSV formatted syslogs to CP
#  The macros are filled in by the pattern database
#
# Send CSV to a file
destination hosts_cp_csv_syslog {
             file    ("<FILEPATH>/dfw_csv_syslog.log"
                      owner(root) group(root) perm(0644) dir_perm(0700) create_dirs(yes)
                      template ("${DATE} dfwpktlogs-- ${action}, ${domain}, ${direction}, ${size}, ${protocol}, ${srcip}, ${srcport}, ${dstip}, ${dst
port},  ${flags}\n")
             );
 };
# Send CSV to CP syslog
destination net_cp_csv_syslog { syslog (   "<TO CP SYSLOG SERVER IP ADDR>"
#                                       suppress(1) # suppress duplicates --- BROKEN
                                        transport(udp)
#                                       throttle(500) # generates too many errors
                                        port(514)
#                                       log_fifo_size(500)
                                        template ("dfwpktlogs-- ${action}, ${domain}, ${direction}, ${size}, ${protocol}, ${srcip}, ${srcport}, ${dst
ip}, ${dstport},  ${flags}\n")
                                     );
};

#################
#################  Main Section - Log directives #########################
#################

##### Send logs to CheckPoint

# Send raw DFW logs to file for testing
#log {source(s_cp_net);
#       filter(f_cp_logs);              		# look for NSX DFW logs
#       destination(hosts_cp_raw_dfwlogs);      # dump out raw log data
# };


#  Build CSV
log {
        source(s_cp_net);                       # Logs are coming from DFW
        filter(f_cp_dfwlogs);                   # Look for DFW firewalls logs
        filter(f_cp_match_DFW);                 # Get rid of TMP log entries
        parser(p_dfw_parser);                   # Parse through DFW log entry, and fill in MACRO names
        rewrite(r_cp_rewrite);                  # Simple translations from DFW to CP like ICMP
        destination(hosts_cp_csv_syslog);       # Dump out CSV to host file
        destination(net_cp_csv_syslog);         # Dump out CSV to network CP syslog server
};

